			/////////////////////////////////	//// data types	/////////////////////////////////		/**	 * returns the value of the hidden properties of [[CLASS]]	 *	 * @param {mixed} obj — some object	 * @return {Boolean}	 *	 * @example	 * $Collection.class('test'); // returns '[object String]'	 * $Collection.class(2); // returns '[object Number]'	 */	Collection.toString = function (obj) {		if (typeof obj === 'undefined') { return Collection.prototype.collection(); }		return Object.prototype.toString.call(obj);	};		/**	 * returns a Boolean indicating whether the object is a string	 *	 * @param {mixed} obj — object to test whether or not it is a string	 * @return {Boolean}	 *	 * @example	 * $Collection.isString('test'); // returns true	 * $Collection.isString(2); // returns false	 */	Collection.isString = function (obj) { return Collection.toString(obj) === '[object String]'; };		/**	 * returns a Boolean indicating whether the object is a number	 *	 * @param {mixed} obj — object to test whether or not it is a number	 * @return {Boolean}	 *	 * @example	 * $Collection.isNumber('test'); // returns false	 * $Collection.isNumber(2); // returns true	 */	Collection.isNumber = function (obj) { return Collection.toString(obj) === '[object Number]'; };		/**	 * returns a Boolean indicating whether the object is a boolean	 *	 * @param {mixed} obj — object to test whether or not it is a boolean	 * @return {Boolean}	 *	 * @example	 * $Collection.isNumber('test'); // returns false	 * $Collection.isNumber(false); // returns true	 */	Collection.isBoolean = function (obj) { return Collection.toString(obj) === '[object Boolean]'; };		/**	 * returns a Boolean indicating whether the object is a function	 *	 * @param {mixed} obj — object to test whether or not it is a function	 * @return {Boolean}	 *	 * @example	 * $Collection.isFunction('test'); // returns false	 * $Collection.isFunction(function () {}); // returns true	 */	Collection.isFunction = function (obj) { return Collection.toString(obj) === '[object Function]'; };		/**	 * returns a Boolean indicating whether the object is a array (not an array-like object)	 *	 * @param {mixed} obj — object to test whether or not it is a array	 * @return {Boolean}	 *	 * @example	 * $Collection.isArray({'0': 1, '1': 2, '2': 3, 'length': 3}); // returns false	 * $Collection.isArray([1, 2, 3]); // returns true	 */	Collection.isArray = function (obj) { return Collection.toString(obj) === '[object Array]'; };		/**	 * returns a Boolean indicating whether the object is a plain object	 *	 * @param {mixed} obj — object to test whether or not it is a plain object	 * @return {Boolean}	 *	 * @example	 * $Collection.isPlainObject({'0': 1, '1': 2, '2': 3, 'length': 3}); // returns true	 * $Collection.isPlainObject(new Date); // returns false	 * $Collection.isPlainObject(Date); // returns false	 */	Collection.isPlainObject = function (obj) { return Collection.toString(obj) === '[object Object]'; };		/**	 * returns a Boolean indicating whether the object is a collection	 *	 * @param {mixed} obj — object to test whether or not it is a collection	 * @return {Boolean}	 *	 * @example	 * $Collection.isCollection({'0': 1, '1': 2, '2': 3, 'length': 3}); // returns true	 * $Collection.isCollection([1, 2, 3]); // returns true	 */	Collection.isCollection = function (obj) { return Collection.isArray(obj) || Collection.isPlainObject(obj); };		/**	 * returns a Boolean value indicating that the object is not equal to: undefined, null, or '' (empty string)	 *	 * @param {mixed} obj — the object, to test its existence	 * @return {Boolean}	 *	 * @example	 * $Collection.isExists(''); // returns false	 * $Collection.isExists(null); // returns false	 * $Collection.isExists(false); // returns true	 */	Collection.isExists = function (obj) { return typeof obj !== 'undefined' && obj !== null && obj !== ''; };