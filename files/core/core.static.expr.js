			/////////////////////////////////	//// expressions	/////////////////////////////////		/**	 * calculate math expression for string	 * 	 * @param {mixed} val — new value	 * @param {mixed} old — old value	 * @return {Number|String}	 *	 * @example	 * $Collection.expr('+=1', 2); // returns 3	 * $Collection.expr('*=2', 2); // returns 4	 * $Collection.expr('+=2', 'test'); // returns '2test'	 */	Collection.expr = function (val, old) {		old = Collection.isExists(old) ? old : '';				if (Collection.isString(val) && val.search(/^[+-\\*\/]{1}=/) !== -1) {			val = val.split('=');			if (!isNaN(val[1])) { val[1] = +val[1]; }						// simple math			switch (val[0]) {				case '+': { val = old + val[1]; } break;				case '-': { val = old - val[1]; } break;				case '*': { val = old * val[1]; } break;				case '/': { val = old / val[1]; } break;			}		}			return val;	};		/**	 * get random integer number	 * 	 * @param {Number} [min=0] — min number	 * @param {Number} [max=10] — max number	 * @return {Number}	 *	 * @example	 * $Collection.getRandomInt(1, 15);	 */	Collection.getRandomInt = function (min, max) {		min = min || 0;		max = max || 10;				return Math.floor(Math.random() * (max - min + 1)) + min;	};